-- DEPRECATED
-- Download links does not work, cause of stupid API
local json = require('json')
local request = require('coro-http').request

local f = string.format

env.wrappers = {}
local wrappers = env.wrappers
local BASE_URL = 'https://nyaa.pantsu.cat/api'
local BASE_DOWNLOAD_URL = 'https://nyaa.si/download/%d.torrent'
local endpoints = {
	SEARCH_TORRENTS = '/search',
	REQUEST_TORRENTS_INDEX = '/',
	REQUEST_TORRENT_INFORMATION = '/view/%d',
	REQUEST_TORRENT_HEAD = '/head/%d'
}

local function toHex(t)
	return ('%%%02X'):format(t:byte())
end

local function formatURL(u)
	return (tostring(u):gsub('%W', toHex))
end

local function getDownloadURL(id)
	return BASE_DOWNLOAD_URL:format(id)
end

local function embedResults(res, title, name, value, e)
	local embed = {}
	local fields = {}

	function format(table, exp, e)
		return exp:gsub('&(.-)&', table):gsub(
			'%$(.-)%$',
			function(g)
				local ch = loadstring('return ' .. g)
				setfenv(ch, e)
				return ch()
			end
		)
	end

	for k, v in pairs(res) do
		e.k, e.v = k, v

		table.insert(
			fields,
			{
				name = format(v, name, e),
				value = format(v, value, e)
			}
		)
	end

	embed.title = format(title)
	embed.fields = fields

	return embed
end

local function reqs(endpoint, query)
	local method = 'GET'
	local url = BASE_URL .. endpoint
	query = type(query) == 'table' and query or {}

	p('query:', query)

	url = {url}
	for i, v in pairs(query) do
		table.insert(url, #url == 1 and '?' or '&')
		table.insert(url, formatURL(i))
		table.insert(url, '=')
		table.insert(url, formatURL(v))
	end
	url = table.concat(url)

	p('URL:', url)
	local success, res, msg = pcall(request, method, url)

	if not success then
		return nil, res
	end

	for i, v in ipairs(res) do
		res[v[1]] = v[2]
		res[i] = nil
	end

	local data = json.decode(msg, 1, json.null)

	if res.code >= 300 then
		p('HTTPS ERR:', res.code)
		return nil, res.code, res.reason
	else
		p(5)
		return data
	end
end

wrappers.search = function(query)
	return reqs(endpoints.SEARCH_TORRENTS, query)
end

wrappers.getIndex = function(query)
	query = tonumber(query) and {id = query} or query
	return reqs(endpoints.REQUEST_TORRENTS_INDEX, query)
end

wrappers.getInfos = function(ID, query)
	local endpoint = f(endpoints.REQUEST_TORRENT_INFORMATION, ID)
	return reqs(endpoint, query)
end

wrappers.getHead = function(ID, query)
	local endpoint = f(endpoints.REQUEST_TORRENT_HEAD, ID)
	return reqs(endpoint, query)
end

local function callback()
	local method = args[1]
	local query = flags

	local function search()
		p('Calling the search method')
		query.limit = query.limit or 3
		query.q = query.q or args[2]

		local results, err, r = wrappers.search(query)
		if not results then
			message:reply(f('ERROR %d : %s', err, r))
			return
		end

		local feildName = '&name&'
		local feildValue =
			[[
**Torrent**: [Download]($getDownloadURL(v.id)$)
**File Size**: &filesize&
**Seeders**: &seeders&
**Leechers**: &leechers&
**id**: &id&]]
		local embed =
			embedResults(
			results.torrents,
			'Search Results for:',
			feildName,
			feildValue,
			{getDownloadURL = getDownloadURL, results = results}
		)
		p(200, embed)
		message.channel:send {
			embed = embed
		}
	end

	local methods = {
		search = search,
		'index',
		'info',
		'head'
	}

	for k, v in pairs(methods) do
		if k == method then
			p('Found the right method : ', method)
			pcall(v)
		end
	end
end

local nyaa = Command('nyaa', callback)

nyaa:setArguments {
	c = {
		-- should be an array
		shortflag = 'c',
		fullflag = 'categories'
	},
	q = {
		-- aka query
		shortflag = 'n',
		fullflag = 'name'
	},
	page = {
		type = 'number',
		shortflag = 'p',
		fullflag = 'page'
	},
	limit = {
		type = 'number',
		shortflag = 'l',
		fullflag = 'limit'
	},
	userID = {
		fullflag = 'userID'
	},
	fromID = {
		fullflag = 'fromID'
	},
	s = {
		shortflag = 's',
		fullflag = 'status'
	},
	maxage = {
		fullflag = 'maxage'
	},
	toDate = {
		fullflag = 'toDate'
	},
	fromDate = {
		fullflag = 'fromDate'
	},
	dateType = {
		fullflag = 'dateType'
	},
	minSize = {
		fullflag = 'minSize'
	},
	maxSize = {
		fullflag = 'maxSize'
	},
	sizeType = {
		fullflag = 'sizeType'
	},
	sort = {
		fullflag = 'sort'
	},
	order = {
		type = 'boolean',
		fullflag = 'order',
		shortflag = 'o'
	},
	lang = {
		-- should be an array
		fullflag = 'lang',
		shortflag = 'l'
	},
	id = {
		type = 'number',
		fullflag = 'id',
		shortflag = 'i'
	}
}

return nyaa
